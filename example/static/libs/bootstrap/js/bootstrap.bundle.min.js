// Bootstrap 5.3.0 Bundle - Minimal version
!((t, e) => {
  "object" == typeof exports && "undefined" != typeof module
    ? (module.exports = e())
    : "function" == typeof window.define && window.define.amd
      ? window.define(e)
      : ((t = "undefined" != typeof globalThis ? globalThis : t || self).bootstrap = e())
})(this, () => {
  const t = new Map(),
    e = {
      set(e, i, n) {
        t.has(e) || t.set(e, new Map())
        const s = t.get(e)
        s.has(i) || 0 === s.size
          ? s.set(i, n)
          : console.error(
              `Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(s.keys())[0]}.`,
            )
      },
      get: (e, i) => (t.has(e) && t.get(e).get(i)) || null,
      remove(e, i) {
        if (!t.has(e)) return
        const n = t.get(e)
        n.delete(i), 0 === n.size && t.delete(e)
      },
    }
  class i {
    constructor(t, e) {
      ;(this._element = t) && ((this._config = this._getConfig(e)), i.setData(t, this.constructor.DATA_KEY, this))
    }
    dispose() {
      i.removeData(this._element, this.constructor.DATA_KEY), (this._element = null), (this._config = null)
    }
    static getInstance(t) {
      return i.getData(t, this.DATA_KEY)
    }
    static getOrCreateInstance(t, e = {}) {
      return this.getInstance(t) || new this(t, "object" == typeof e ? e : null)
    }
    static get VERSION() {
      return "5.3.0"
    }
    static get DATA_KEY() {
      return `bs.${this.NAME}`
    }
    static get EVENT_KEY() {
      return `.${this.DATA_KEY}`
    }
    static setData(t, i, n) {
      e.set(t, i, n)
    }
    static getData(t, i) {
      return e.get(t, i)
    }
    static removeData(t, i) {
      e.remove(t, i)
    }
  }
  return { Tooltip: i, Modal: i, Dropdown: i, Collapse: i, Alert: i }
})
